apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: github
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: GitHub
  mode: Pipeline
  pipeline:
  - step: github
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      spec:
        source: "oxr = option(\"params\").oxr\n\n_metadata = lambda suffix: str, kind: str -> any {\n    {\n        if suffix == \"\":\n            name = oxr.spec.id\n        else:\n            name = oxr.spec.id + \"-\" + suffix\n        annotations = {\n            \"krm.kcl.dev/composition-resource-name\" = oxr.spec.id + \"-\" + kind + \"-\" + suffix\n        }\n    }\n}\n\nschema repositoryFile:\n    _name: str\n    _file: str\n    _content: str\n    _branch: bool = True\n    apiVersion = \"repo.github.upbound.io/v1alpha1\"\n    kind = \"RepositoryFile\"\n    metadata = _metadata(_name, \"file\")\n    spec = {\n        forProvider = {\n            commitAuthor = \"Crossplane\"\n            commitEmail = \"github-provider@crossplane.io\"\n            commitMessage = \"Crossplane rocks [skip ci]\"\n            content = _content\n            file = _file\n            repositorySelector.matchControllerRef = True\n            if _branch:\n                branch = \"init\"\n        }\n    }\n\nitems = [\n    {\n        apiVersion = \"repo.github.upbound.io/v1alpha1\"\n        kind = \"Repository\"\n        metadata = _metadata(\"\", \"repo\")\n        spec = {\n            forProvider = {\n                name = oxr.spec.id\n                if oxr.spec.parameters.public:\n                    visibility = \"public\"\n                else:\n                    visibility = \"private\"\n                hasIssues = True\n            }\n            managementPolicies: [\n                \"Create\",\n                \"Observe\",\n                \"Update\",\n                \"LateInitialize\",\n            ]\n        }\n    }\n    {\n        apiVersion = \"repo.github.upbound.io/v1alpha1\"\n        kind = \"Branch\"\n        metadata = _metadata(\"init\", \"branch\")\n        spec.forProvider = {\n            branch = \"init\"\n            repositorySelector.matchControllerRef = True\n        }\n    }\n    {\n        _body = \"\"\"\\\n1. Open https://github.com/${oxr.spec.parameters.repo.user}/${oxr.spec.id}/settings/actions and enable `Read and write permissions`.\n2. Open https://github.com/${oxr.spec.parameters.repo.user}/${oxr.spec.id}/settings/secrets/actions and add `PAT_TOKEN` with the GitHub token to `Repository secrets`.\n3. Review, modify (optional), merge, enjoy.\n\"\"\"\n        if oxr.spec.parameters?.gitops?.enabled and not oxr.spec.parameters?.backstage?.enabled:\n            _body = _body + \"\"\"\\\n4. Execute the `gitops` workflow to include the app into the GitOps repository.\n\"\"\"\n        apiVersion = \"repo.github.upbound.io/v1alpha1\"\n        kind = \"PullRequest\"\n        metadata = _metadata(\"init\", \"pr\")\n        spec.forProvider = {\n            baseRef = \"main\"\n            headRef = \"init\"\n            body = _body\n            title = \"Initial\"\n            maintainerCanModify = True\n            baseRepositorySelector.matchControllerRef = True\n        }\n    }\n    repositoryFile {\n        _name = \"gitignore\"\n        _file = \".gitignore\"\n        _content = \"\"\"\\\n/tmp\n\"\"\"\n        _branch = False\n    }\n    repositoryFile {\n        _name = \"devbox\"\n        _file = \"devbox.json\"\n        _content = \"\"\"\\\n{\n  \"$schema\": \"https://raw.githubusercontent.com/jetify-com/devbox/0.11.1/.schema/devbox.schema.json\",\n  \"packages\": [\n    \"tmux@3.4\"\n  ],\n  \"shell\": {\n    \"init_hook\": [],\n    \"scripts\": {}\n  }\n}\n\"\"\"\n        _branch = False\n    }\n    repositoryFile {\n        _name = \"readme\"\n        _file = \"README.md\"\n        _content = \"\"\"\\\n# ${oxr.spec.id}\n\nSilly description\n\"\"\"\n    }\n    repositoryFile {\n        _name = \"app\"\n        _file = \"k8s/appclaim.yaml\"\n        _content = \"\"\"\\\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: AppClaim\nmetadata:\n  name: ${oxr.spec.id}\nspec:\n  id: ${oxr.spec.id}\n  compositionSelector:\n    matchLabels:\n      type: backend\n      location: local\n  parameters:\n    namespace: ${oxr.spec.parameters.app.namespace}\n    image: ${oxr.spec.parameters.registry}/${oxr.spec.id}\n    port: 8080\n    host: ${oxr.spec.parameters.app.host}\n\"\"\"\n    }\n    if oxr.spec.parameters?.db?.enabled:\n      repositoryFile {\n          _name = \"db\"\n          _file = \"k8s/dbclaim.yaml\"\n          _content = \"\"\"\\\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ${oxr.spec.id}-db-password\ndata:\n  password: cG9zdGdyZXM=\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQLClaim\nmetadata:\n  name: ${oxr.spec.id}-db\nspec:\n  id: ${oxr.spec.id}-db\n  compositionSelector:\n    matchLabels:\n      provider: ${oxr.spec.parameters.db.provider}\n      db: postgresql\n  parameters:\n    version: \"${oxr.spec.parameters.db.version}\"\n    size: medium\n\"\"\"\n      }\n    repositoryFile {\n        _name = \"ci\"\n        _file = \".github/workflows/ci.yaml\"\n        _content = \"\"\"\\\nname: ci\nrun-name: ci\non:\n  push:\n    branches:\n      - main\njobs:\n  build-container-image:\n    runs-on: ubuntu-latest\n    env:\n      TAG: 0.0.$$[[ github.run_number ]]\n      FORCE_COLOR: 1\n    steps:\n      - uses: earthly/actions-setup@v1\n        with:\n          version: v0.8.0\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      - name: Build and push\n        run: |\n          earthly --push +all --tag $TAG\n      - name: Commit changes\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Release $$[[ env.TAG ]] [skip ci]\"\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: $$[[ secrets.GITHUB_TOKEN ]]\n          branch: $$[[ github.ref ]]\n\"\"\".replace(\"[[\", \"{{\").replace(\"]]\", \"}}\")\n    }\n    if oxr.spec.parameters?.gitops?.enabled and oxr.spec.parameters?.gitops?.user != \"\" and oxr.spec.parameters?.gitops?.repo != \"\":\n        repositoryFile {\n            _name = \"gitops\"\n            _file = \".github/workflows/gitops.yaml\"\n            _content = \"\"\"\\\nname: gitops\nrun-name: gitops\non: workflow_dispatch\njobs:\n  manifest:\n    runs-on: ubuntu-latest\n    env:\n      FORCE_COLOR: 1\n      APP: crossplane-gh-demo\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          repository: ${oxr.spec.parameters.gitops.user}/${oxr.spec.parameters.gitops.repo}\n          token: $$[[ secrets.PAT_TOKEN ]]\n      - name: Manifest\n        run: |\n            cp argocd-app.tmpl apps/${oxr.spec.id}.yaml\n            yq --inplace \".metadata.name = \\\\\"${oxr.spec.id}\\\\\"\" apps/${oxr.spec.id}.yaml\n            yq --inplace \".spec.source.repoURL = \\\\\"https://github.com/$GITHUB_REPOSITORY\\\\\"\" apps/${oxr.spec.id}.yaml\n            yq --inplace \".spec.destination.namespace = \\\\\"${oxr.spec.parameters.app.namespace}\\\\\"\" apps/${oxr.spec.id}.yaml\n            git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n            git config --local user.name \"github-actions[bot]\"\n            git add .\n            git commit -m \"Added apps/${oxr.spec.id}.yaml [skip ci]\"\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: $$[[ secrets.PAT_TOKEN ]]\n          repository: ${oxr.spec.parameters.gitops.user}/${oxr.spec.parameters.gitops.repo}\n          force: true\n\"\"\".replace(\"[[\", \"{{\").replace(\"]]\", \"}}\")\n            _branch = False\n        }\n    if oxr.spec.parameters?.backstage?.enabled:\n        repositoryFile {\n            _name = \"backstage-catalog-info\"\n            _file = \"catalog-info.yaml\"\n            _content = \"\"\"\\\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: ${oxr.spec.id}\n  description: Silly description\n  annotations:\n    github.com/project-slug: ${oxr.spec.parameters.repo.user}/${oxr.spec.id}\n    backstage.io/techdocs-ref: dir:. \n    backstage.io/kubernetes-id: dot\n    backstage.io/kubernetes-namespace: git-repos\n    backstage.io/kubernetes-label-selector: app.kubernetes.io/name=${oxr.spec.id}\nspec:\n  type: backend\n  lifecycle: production\n  owner: ${oxr.spec.parameters.repo.user}/${oxr.spec.id}\n  system: DevOpsCatalog\n\"\"\"\n        }\n    if oxr.spec.parameters.app.language == \"go\":\n        repositoryFile {\n            _name = \"main-go\"\n            _file = \"main.go\"\n            _content = \"\"\"\\\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n  \"os\"\n\n  \"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n  log.Println(\"Starting server...\")\n  router := gin.New()\n  router.GET(\"/\", rootHandler)\n  port := os.Getenv(\"PORT\")\n  if len(port) == 0 {\n    port = \"8080\"\n  }\n  router.Run(fmt.Sprintf(\":%s\", port))\n}\n\nfunc rootHandler(ctx *gin.Context) {\n  ctx.String(http.StatusOK, \"This is a silly demo\")\n}\n\"\"\"\n        }\n        repositoryFile {\n            _name = \"go-mod\"\n            _file = \"go.mod\"\n            _content = \"\"\"\\\nmodule app\n\ngo 1.22.0\n\nrequire github.com/gin-gonic/gin v1.10.0\n\nrequire (\n        github.com/bytedance/sonic v1.11.6 // indirect\n        github.com/bytedance/sonic/loader v0.1.1 // indirect\n        github.com/cloudwego/base64x v0.1.4 // indirect\n        github.com/cloudwego/iasm v0.2.0 // indirect\n        github.com/gabriel-vasile/mimetype v1.4.3 // indirect\n        github.com/gin-contrib/sse v0.1.0 // indirect\n        github.com/go-playground/locales v0.14.1 // indirect\n        github.com/go-playground/universal-translator v0.18.1 // indirect\n        github.com/go-playground/validator/v10 v10.20.0 // indirect\n        github.com/goccy/go-json v0.10.2 // indirect\n        github.com/json-iterator/go v1.1.12 // indirect\n        github.com/klauspost/cpuid/v2 v2.2.7 // indirect\n        github.com/leodido/go-urn v1.4.0 // indirect\n        github.com/mattn/go-isatty v0.0.20 // indirect\n        github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n        github.com/modern-go/reflect2 v1.0.2 // indirect\n        github.com/pelletier/go-toml/v2 v2.2.2 // indirect\n        github.com/twitchyliquid64/golang-asm v0.15.1 // indirect\n        github.com/ugorji/go/codec v1.2.12 // indirect\n        golang.org/x/arch v0.8.0 // indirect\n        golang.org/x/crypto v0.23.0 // indirect\n        golang.org/x/net v0.25.0 // indirect\n        golang.org/x/sys v0.20.0 // indirect\n        golang.org/x/text v0.15.0 // indirect\n        google.golang.org/protobuf v1.34.1 // indirect\n        gopkg.in/yaml.v3 v3.0.1 // indirect\n)\n\"\"\"\n        }\n        repositoryFile {\n            _name = \"go-sum\"\n            _file = \"go.sum\"\n            _content = \"\"\"\\\ngithub.com/bytedance/sonic v1.11.6 h1:oUp34TzMlL+OY1OUWxHqsdkgC/Zfc85zGqw9siXjrc0=\ngithub.com/bytedance/sonic v1.11.6/go.mod h1:LysEHSvpvDySVdC2f87zGWf6CIKJcAvqab1ZaiQtds4=\ngithub.com/bytedance/sonic/loader v0.1.1 h1:c+e5Pt1k/cy5wMveRDyk2X4B9hF4g7an8N3zCYjJFNM=\ngithub.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=\ngithub.com/cloudwego/base64x v0.1.4 h1:jwCgWpFanWmN8xoIUHa2rtzmkd5J2plF/dnLS6Xd/0Y=\ngithub.com/cloudwego/base64x v0.1.4/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=\ngithub.com/cloudwego/iasm v0.2.0 h1:1KNIy1I1H9hNNFEEH3DVnI4UujN+1zjpuk6gwHLTssg=\ngithub.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/gabriel-vasile/mimetype v1.4.3 h1:in2uUcidCuFcDKtdcBxlR0rJ1+fsokWf+uqxgUFjbI0=\ngithub.com/gabriel-vasile/mimetype v1.4.3/go.mod h1:d8uq/6HKRL6CGdk+aubisF/M5GcPfT7nKyLpA0lbSSk=\ngithub.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=\ngithub.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=\ngithub.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=\ngithub.com/gin-gonic/gin v1.10.0/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=\ngithub.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=\ngithub.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=\ngithub.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=\ngithub.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=\ngithub.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=\ngithub.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=\ngithub.com/go-playground/validator/v10 v10.20.0 h1:K9ISHbSaI0lyB2eWMPJo+kOS/FBExVwjEviJTixqxL8=\ngithub.com/go-playground/validator/v10 v10.20.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=\ngithub.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=\ngithub.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.2.7 h1:ZWSB3igEs+d0qvnxR/ZBzXVmxkgt8DdzP6m9pfuVLDM=\ngithub.com/klauspost/cpuid/v2 v2.2.7/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=\ngithub.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=\ngithub.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=\ngithub.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=\ngithub.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=\ngithub.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=\ngithub.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=\ngithub.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=\ngolang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=\ngolang.org/x/arch v0.8.0 h1:3wRIsP3pM4yUptoR96otTUOXI367OS0+c9eeRi9doIc=\ngolang.org/x/arch v0.8.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=\ngolang.org/x/crypto v0.23.0 h1:dIJU/v2J8Mdglj/8rJ6UUOM3Zc9zLZxVZwwxMooUSAI=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/net v0.25.0 h1:d/OCCoBEUq33pjydKrGQhw7IlUPI2Oylr+8qLx49kac=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.15.0 h1:h1V/4gjBv8v9cjcR6+AR5+/cIYK5N/WAgiv4xlsEtAk=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v1.34.1 h1:9ddQBjfCyZPOHPUiPxpYESBLc+T8P3E+Vo4IbKZgFWg=\ngoogle.golang.org/protobuf v1.34.1/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nnullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=\nrsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=\n\"\"\"\n        }\n        repositoryFile {\n            _name = \"earthfile\"\n            _file = \"Earthfile\"\n            _content = \"\"\"\\\nVERSION 0.8\nFROM ghcr.io/vfarcic/silly-demo-earthly:0.0.5\nARG --global registry=${oxr.spec.parameters.registry}\nARG --global image=${oxr.spec.id}\nWORKDIR /go-workdir\n\nbinary:\n    COPY go.mod go.sum .\n    COPY *.go .\n    RUN GOOS=linux GOARCH=amd64 go build -o app\n    SAVE ARTIFACT app\n\nimage:\n    BUILD +binary\n    ARG tag='latest'\n    FROM scratch\n    EXPOSE 8080\n    CMD [\"app\"]\n    ENV VERSION=$tag\n    COPY +binary/app /usr/local/bin/app\n    SAVE IMAGE --push $registry/$image:$tag $registry/$image:latest\n\nmanifests:\n    ARG tag\n    COPY k8s/appclaim.yaml k8s/appclaim.yaml\n    RUN yq --inplace \".spec.parameters.image = \\\\\"$registry/$image:$tag\\\\\"\" k8s/appclaim.yaml\n    SAVE ARTIFACT k8s/appclaim.yaml AS LOCAL k8s/appclaim.yaml\n\nall:\n    ARG tag\n    WAIT\n        BUILD +image --tag $tag\n    END\n    BUILD +manifests --tag $tag\n\"\"\"\n        }\n    if oxr.spec.parameters.app.language == \"js\":\n        repositoryFile {\n            _name = \"main-js\"\n            _file = \"main.js\"\n            _content = \"\"\"\\\nconsole.log('Hello World');\n\"\"\"\n        }\n        repositoryFile {\n            _name = \"earthfile\"\n            _file = \"Earthfile\"\n            _content = \"\"\"\\\nVERSION 0.8\nFROM ghcr.io/vfarcic/silly-demo-earthly:0.0.5\nARG --global registry=${oxr.spec.parameters.registry}\nARG --global image=${oxr.spec.id}\n\nimage:\n    ARG tag='latest'\n    FROM scratch\n    RUN echo \"I haven't used JS for a while so you'll need to find someone else to write this Earthfile for you.\"\n    SAVE IMAGE --push $registry/$image:$tag $registry/$image:latest\n\nmanifests:\n    RUN yq --inplace \".spec.parameters.image = \\\\\"$registry/$image:$tag\\\\\"\" k8s/appclaim.yaml\n\nall:\n    ARG tag\n    WAIT\n        BUILD +image --tag $tag\n    END\n    BUILD +manifests --tag $tag\n\"\"\"\n        }\n]\n"
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
  writeConnectionSecretsToNamespace: crossplane-system
