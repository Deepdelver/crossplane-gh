apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: github
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: GitHub
  mode: Pipeline
  pipeline:
  - step: github
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      spec:
        source: |
          oxr = option("params").oxr

          _metadata = lambda suffix: str, kind: str -> any {
              {
                  if suffix == "":
                      name = oxr.spec.id
                  else:
                      name = oxr.spec.id + "-" + suffix
                  annotations = {
                      "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-" + kind + "-" + suffix
                  }
              }
          }

          schema repositoryFile:
              _name: str
              _file: str
              _content: str
              _branch: bool = True
              apiVersion = "repo.github.upbound.io/v1alpha1"
              kind = "RepositoryFile"
              metadata = _metadata(_name, "file")
              spec = {
                  forProvider = {
                      commitAuthor = "Crossplane"
                      commitEmail = "github-provider@crossplane.io"
                      commitMessage = "Crossplane rocks"
                      content = _content
                      file = _file
                      repositorySelector.matchControllerRef = True
                      if _branch:
                          branch = "init"
                  }
              }

          items = [
              {
                  apiVersion = "repo.github.upbound.io/v1alpha1"
                  kind = "Repository"
                  metadata = _metadata("", "repo")
                  spec.forProvider = {
                      name = oxr.spec.id
                      if oxr.spec.parameters.public:
                          visibility = "public"
                      else:
                          visibility = "private"
                      hasIssues = True
                  }
              }
              {
                  apiVersion = "repo.github.upbound.io/v1alpha1"
                  kind = "Branch"
                  metadata = _metadata("init", "branch")
                  spec.forProvider = {
                      branch = "init"
                      repositorySelector.matchControllerRef = True
                  }
              }
              {
                  apiVersion = "repo.github.upbound.io/v1alpha1"
                  kind = "PullRequest"
                  metadata = _metadata("init", "pr")
                  spec.forProvider = {
                      baseRef = "main"
                      headRef = "init"
                      body = "Review, approve or modify, merge, enjoy."
                      title = "Initial"
                      maintainerCanModify = True
                      baseRepositorySelector.matchControllerRef = True
                  }
              }
              repositoryFile {
                  _name = "gitignore"
                  _file = ".gitignore"
                  _content = """\
          /tmp
          """
                  _branch = False
              }
              repositoryFile {
                  _name = "app"
                  _file = "k8s/appclaim.yaml"
                  _content = """\
          apiVersion: devopstoolkitseries.com/v1alpha1
          kind: AppClaim
          metadata:
            name: ${oxr.spec.id}
          spec:
            id: ${oxr.spec.id}
            compositionSelector:
              matchLabels:
                type: backend
                location: local
            parameters:
              namespace: ${oxr.spec.parameters.app.namespace}
              image: ${oxr.spec.parameters.registry}/${oxr.spec.id}
              port: 8080
              host: ${oxr.spec.parameters.app.host}
          """
              }
              repositoryFile {
                  _name = "ci"
                  _file = ".github/workflows/ci.yaml"
                  _content = """\
          name: ci
          run-name: ci
          on:
            push:
              branches:
                - main
          jobs:
            build-container-image:
              runs-on: ubuntu-latest
              env:
                TAG: 0.0.$[[ github.run_number ]]
                FORCE_COLOR: 1
              steps:
                - uses: earthly/actions-setup@v1
                  with:
                    version: v0.8.0
                - name: Checkout
                  uses: actions/checkout@v4
                - name: Set up QEMU
                  uses: docker/setup-qemu-action@v3
                - name: Build and push
                  run: |
                    earthly --push +all --tag $TAG
                - name: Commit changes
                  run: |
                    git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
                    git config --local user.name "github-actions[bot]"
                    git add .
                    git commit -m "Release $[[ env.TAG ]] [skip ci]"
                - name: Push changes
                  uses: ad-m/github-push-action@master
                  with:
                    github_token: $[[ secrets.GITHUB_TOKEN ]]
                    branch: $[[ github.ref ]]
          """.replace("[[", "{{").replace("]]", "}}")
              }
              if oxr.spec.parameters.app.language == "go":
                  repositoryFile {
                      _name = "main-go"
                      _file = "main.go"
                      _content = """\
          package main
          import "fmt"
          func main() {
              fmt.Println("hello world")
          }
          """
                  }
                  repositoryFile {
                      _name = "go-mod"
                      _file = "go.mod"
                      _content = """\
          module app

          go 1.21.5
          """
                  }
                  repositoryFile {
                      _name = "earthfile"
                      _file = "Earthfile"
                      _content = """\
          VERSION 0.8
          FROM ghcr.io/vfarcic/silly-demo-earthly:0.0.5
          ARG --global registry=${oxr.spec.parameters.registry}
          ARG --global image=${oxr.spec.id}
          WORKDIR /go-workdir

          binary:
              COPY go.mod .
              COPY *.go .
              RUN GOOS=linux GOARCH=amd64 go build -o app
              SAVE ARTIFACT app

          image:
              BUILD +binary
              ARG tag='latest'
              FROM scratch
              EXPOSE 8080
              CMD ["app"]
              ENV VERSION=$tag
              COPY +binary/app /usr/local/bin/app
              SAVE IMAGE --push $registry/$image:$tag $registry/$image:latest

          manifests:
              RUN yq --inplace ".spec.parameters.image = \\"$registry/$image:$tag\\"" k8s/appclaim.yaml

          all:
              ARG tag
              WAIT
                  BUILD +image --tag $tag
              END
              BUILD +manifests --tag $tag
          """
                  }
              if oxr.spec.parameters.app.language == "js":
                  repositoryFile {
                      _name = "main-js"
                      _file = "main.js"
                      _content = """\
          console.log('Hello World');
          """
                  }
                  repositoryFile {
                      _name = "earthfile"
                      _file = "Earthfile"
                      _content = """\
          VERSION 0.8
          FROM ghcr.io/vfarcic/silly-demo-earthly:0.0.5
          ARG --global registry=${oxr.spec.parameters.registry}
          ARG --global image=${oxr.spec.id}

          image:
              ARG tag='latest'
              FROM scratch
              RUN echo "I haven't used JS for a while so you'll need to find someone else to write this Earthfile for you."
              SAVE IMAGE --push $registry/$image:$tag $registry/$image:latest

          manifests:
              RUN yq --inplace ".spec.parameters.image = \\"$registry/$image:$tag\\"" k8s/appclaim.yaml

          all:
              ARG tag
              WAIT
                  BUILD +image --tag $tag
              END
              BUILD +manifests --tag $tag
          """
                  }
          ]
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
  writeConnectionSecretsToNamespace: crossplane-system
